#!groovy
// Check host1 properties
properties([disableConcurrentBuilds()])

pipeline {
    agent {
        label 'master'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
		stage("clearing old build") {
            steps {
                echo " ============== clearing old build =================="
                dir ('weather_dockerfile') {
					sh """
						rm -R weatherApp 
					"""
				}					
            }
        }
        stage("git clone project") {
            steps {
                echo " ============== git clone project =================="
                dir ('weather_dockerfile') {
					sh """
						git clone https://github.com/kiaev/weatherApp.git 
					"""
				}					
            }
        }
		stage('SonarQube analysis') {
			withSonarQubeEnv('My SonarQube Server') {
				sh "tool 'SonarScanner 2.14' /bin/sonar-scanner"
			}
		}
        stage("create docker image") {
            steps {
                    echo "========= start buiding image ========="
                    dir ('weather_dockerfile') {
                        sh 'docker build -t mrfoxhound/weather-app:1.0.0 .'
                    }
            }
        }
		stage("docker login") {
            steps {
                echo " ============== docker login =================="
                withCredentials([usernamePassword(credentialsId: 'dockerHub_kiaev', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    docker login -u $USERNAME -p $PASSWORD
                    """
                }
                
            }
        }
        stage("docker push") {
            steps {
                echo " ============== start pushing image =================="
                sh '''
                docker push mrfoxhound/weather-app:1.0.0
                '''
            }
        }
    }
}
